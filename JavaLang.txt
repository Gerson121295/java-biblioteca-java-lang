


---- Biblioteca Java.lang  ----

-- Java Programando con Object y String
- Modelo: Se refiere la carpeta modelo a las clases que representan, cada entidad del 
negocio. Son entidades que representan sistematicamente como seria esa parte del negocio
por ejemplo un cliente, contador un funcionario.
Una carpeta en java debe escribirse en minuscula.

En java La linea 1 es la declaracion del paquete, la ubicacion de esta clase. 
package test; esta dentro del paquete test.


extencion del pais o compania.nombre de la empresa.paquete.nombre de la clase.
com.bytebank.modelo.Administrador    com = compañia

¿Qué es FQN?
Es el nombre completo de la clase compuesto por el nombre del paquete y el nombre de la clase.
el FQN (Full Qualified Name) es el nombre completo de la clase, que consta del 
nombre del paquete y el nombre de la clase.
FQN = Nombre del paquete. Nombre de clase simple

Afirmaciones sobre Packages:

B) Los Packages son directorios con un significado especial dentro del código fuente de Java
C) La palabra reservada package debe ser la primera declaración en el código fuente de Java.
D) Los Packages se utilizan para organizar y agrupar clases e interfaces.


Pedro trabaja en la empresa Uberdist en el proyecto con el sobrenombre de udnotas. 
Pedro también mencionó que la empresa tiene un sitio web con la dirección 
uberdist.com.br.

Pedro tiene dudas sobre la nomenclatura del package. 
¿Qué nombre tendría más sentido y se considera una buena práctica?

br.com.uberdist.udnotas
 siempre siguiendo la regla: NOMBRE_DEL_SITE_AL_REVES.NOMBRE_DEL_PROYECTO

Se debe tener en cuenta, la siguiente estructura como organiza Java:
pais.tipo_de_organizacion.nombre_de_la_empresa.paquete_para_organizar


-- import : permite traer clases de otros paquetes a nuestro archivo actual.

paquete actual: package com.bytebank.test
Arriba en la clase actual se debe importar la clase a usar:

import com.bytebank.modelo.CuentaAhorros;
import com.bytebank.modelo.*; //permite importar todas las clases que se encuentren en la clase modelo.

clase actual: public class TestCuenta {  
---Ya se puede utilizar la clase CuentaAhorros del paquete modelo en la clase 
TestCuenta del paquete test.


Estructura de una clase en java:
Paquete de la clase
Import //imports de otras clases
la clase como tal.


A) Solo puede tener una declaración de package por archivo
B) La declaración import es opcional
C) Es posible repetir la declaración import para importaciones de diferentes packages
D) La definición de clase siempre debe ir por último (después de package e import)


En el desarrollo de Java, organizamos nuestras clases en paquetes:

-Cuando un proyecto usa paquetes, podemos usar import de otras clases para su uso.
import facilita el uso de la clase porque no necesitamos el Full Qualified Name.

-Por organización y por la convención adoptada, debemos seguir el dominio de la 
empresa. Es decir, si la empresa tiene el dominio alura.com.br, los paquetes deben 
ser subpaquetes de br.com.alura.

-El modificador default de Java restringe el acceso a nivel de paquete. Por lo tanto, 
si no se define ningún modificador, ya sea en la clase, método o atributo, solo las 
clases del mismo paquete pueden acceder a esta información.
De forma predeterminada, sólo las clases del mismo paquete pueden acceder a esta información.


¿Qué aprendimos?
Los packages sirven para organizar nuestro código.
Los packages son parte del FQN (Full Qualified Name) de la clase.
El nombre completo de la clase (FQN) consta de: PACKAGE.NOMBRE_SIMPLE_DE_LA_CLASE
La definición de package debe ser la primera declaración en el código fuente
Para facilitar el uso de clases de otros packages, podemos importarlas
Los import son justo después de la declaración del package

La nomenclatura padrón es usar el nombre de dominio en la web al revés con el 
nombre del proyecto, por ejemplo:
br.com.caelum.geradornotas
br.com.alura.gnarus
br.gov.rj.notas
de.adidas.lager


-- 02 -  Modificadores de Acceso: 
Delimita el alcance de un objeto en JAVA Puede ser un objeto un metodo, 
campo variable o un atributo. El modificador de acceso delimita el alcance o la
visibilidad que tendrá dentro del proyecto.

Cuando una clase no tiene modificador de acceso java le asigna el default.

//default: Esta clase sera visible y tendran acceso las clases que unicamente esten dentro del mismo paquete. -Visible a nivel de paquete
class Contador extends Funcionario{ //La clase Contador java le asigna el modificador de acceso Default

//public: Este modificador es el mas permisivo: No importa donde este tu puedes entrar. --Visible global.Accesible desde cualquier parte.
public class Administrador extends Funcionario{ //Esta clase su modificador es publico.

//protected: Este da visibilidad a nivel del paquete y a nivel de herencia(a todas las clases hijas tendran acceso).
//private: Este es el mas restrictivo de todos, No se puede acceder a el fuera de la clase. Solo visible dentro de la misma clase.



	--- Documentacion en Javadoc

/**
 * Estructura para la documentacion
 * Cuenta va a crear nuevas instancias de CuentaCorriente.
 * @version 1.0
 * @author Gerson121295
 */

   /**
     * Este metodo retira dinero de la cuenta y su ocurre un error devuelve una excepcion.
     * @param valor
     * @throws SaldoInsuficienteException
     */

Se documenta arriba de la clase, arriba del metodo o atributos.
Esta documentacion se llama JavaDoc: documentacion dentro del codigo.

En el simbolo de la Lupa escribir JavaDoc: para que habilite la vista javadoc.
Java doc es hacer la documentacion publica para que las personas la vean el codigo.

Generar javadoc del proyecto en eclipse:
Proyect -> Generate -> javadoc  --> Elegir el proyecto

Generar javadoc del proyecto en Intelij:
Tools -> Generate JavaDoc --Elegir el proyecto

Sobre Javadoc:
A) Debe tener instalado el JDK para poder generar la documentación de javadoc.
B) El javadoc es documentación escrita por el desarrollador para desarrolladores.
D) Hay etiquetas especiales para marcar el autor o la versión de la clase.

lista completa:
@author (usado en la clase o interfaz)
@version (usado en la clase o interfaz)
@param (usado en el método y constructor)
@return (usado solo en el método)
@exception o @throws (en el método o constructor)
@see
@since
@serial
@deprecated
Es importante que las etiquetas javadoc existan solo para estandarizar algunos 
datos fundamentales de su código fuente, como el autor y la versión.


-- 03 - Archivo JAR  --- 

Archivo .jar es un archivo comprimido,(igual que el archivo .zip) tienen el codigo 
compilado la funcionalidad en si de nuestro codigo.


--- 	Genrerar un archivo .jar usando Eclipse  ---

clic derecho en el proyecto --> Clic en export --> desplegar la carpeta: JAVA
luego seleccionar el archivo: JARFile luego clic en Next --> Seleccionar los 
recursos a exportar,(no exportar documentacion) luego clic en browser(para elegir 
donde lo va exportar, hay que darle un nombre al archivo luego clic en save,
y clic en finish y genera el archivo.jar

copiar el archivo.jar generado en una carpeta llamada lib en eclipse del otro
proyecto el cual queremos utilizar la funcionalidad. (esta carpeta se crea, 
por convencion se usa la palabra lib para almacenar las librerias).
En el proyecto en el cual vamos a utilizar la funcionalidad de otro proyecto
buscamos la carpeta lib el archivo.jar Luego damos clic derecho en el archivo.jar 
y dar clic en build Path -> clic Add to Build Path.
y con esto ya podemos hacer uso de las clases y funcionarlidades que contriene el 
proyecto, en nuestro proyecto nuevo.
-------------------------------------------------------------------------------------


-- pasos para crear el archivo .jar de un proyecto usando Intelij

clic en file
clic en Project Structure
clic en Artifacts -> clic en el signo "+" luego
clien JAR -> clic en from modules with dependencies
luego seleccionar el proyecto.

Nota: no seleccionar -  Main Class: "seleccionar el main del proyecto"
	El metodo main es la clase que inicializa el proyecto, por lo que podemos
	seleccionarla cuando queramos generar un archivo.jar ejecutable.
clic en OK
luego clic en Apply luego en OK.

Luego clic en la pestaña Build -->clic en build Artifacts
seleccionar la clase creada y clic en build.

El archivo generado se encontrará: en out/artifacts>BibliotecajavaLang.jar
Este archivo se copia. para pegarlo en el otro proyecto donde queremos utilizar las clases.
En el otro proyecto se debe crear una carpeta llamada lib para guardar nuestro archivo .jar
luego damos clic derecho sobre nuestro archivo.jar y damos clic en add_as_library y le damos un 
nombre, elegimos el nivel: Project Library, elegimos el modulo al cual se va a agregar que es
nuestro proyecto en el que se esta trabajando luego clic en Ok y listo.
ya podemos instanciar objetos, utilizarla funcionalidad del proyecto anterior en nuestro proyecto.

Un conjunto de clases exportadas en un JAR se le conocen como librerias.
Este archivo jar se almacena en otro proyecto en otra carpeta llamada lib
para despues ser usadas.



-----------------Fuente de un Post-----------------------------------------
pasos para crear el archivo .jar de un proyecto

clic en file
clic en Project Structure
clic en Artifacts -> clic en el signo "+" luego
clien JAR -> clic en from modules with dependencies
luego en Main Class: "seleccionar el main del proyecto"
clic en OK
luego clic en Apply luego en OK.

Luego clic en la pestaña Build -->clic en build Artifacts
seleccionar la clase creada y clic en build.

Ejecutar el archivo .jar

Abrir CMD y moverse a la ruta del proyecto en out --> artifacts
y ejecutar el archivo creado.

C:\Users\Hp01\OneDrive\Escritorio\Cursos\Java-Random\JAVASE\HelloWord\out\artifacts

en cmd ejecutar:  java -jar HolaMundo.jar

--------------------------------------------------------

-- Jar Ejecutables ---------

-- pasos para crear el archivo .jar de un proyecto usando Intelij

clic en file
clic en Project Structure
clic en Artifacts -> clic en el signo "+" luego
clien JAR -> clic en from modules with dependencies
luego seleccionar el proyecto.
-- Para crear un archivo.jar ejecutable agregamos el siguiente paso
Le damos un nombre a nuestro ejecutable con terminacion: ejecutable
Nota: Seleccionar el Main Class: "seleccionar el main del proyecto"
	El metodo main es la clase que inicializa el proyecto, por lo que podemos
	seleccionarla cuando queramos generar un archivo.jar ejecutable.
clic en OK
luego clic en Apply luego en OK.

Luego clic en la pestaña Build -->clic en build Artifacts
seleccionar la clase creada y clic en build.


Luego ir a CMD y ubicarnos en el path del proyecto
Abrir CMD y moverse a la ruta del proyecto en out --> artifacts
y ejecutar el archivo creado.

Alura\JavaBackend\BibliotecaJavaLang\out\artifacts\BibliotecaJavaLang_jar
en cmd ejecutar:  java -jar java -jar BibliotecaJavaLang.jar

Nota: Lo mismo pasos para eclipse al crear un archivo .jar ejecutable
solo debemos darle un nombre y elegir el main del proyecto.
----------------------------------------------------------------------


-- Datos sobre distribucion de codigo

En cuanto a la generación de documentación, podemos usar Javadoc, para la 
distribución podemos empaquetar la aplicación en un jar. Comencemos con Javadoc.

El Javadoc solo estará disponible para las instalaciones de JDK’s y no para las 
de JRE’s. Asegúrate de estar usando un JDK.

---  Datos sobre JAR:
-Es un archivo comprimido ZIP. no es más que un archivo ZIP, pero con la 
extensión .jar

-Es el formato estándar en el mundo de Java para distribuir código compilado.
cualquier biblioteca o proyecto usará JAR(s) para distribuir el código.


4 - El paquete java lang.

Cuando hablamos de excepciones hemos visto varias clases como Exception, 
RuntimeException, NullPointerException o ArithmeticException.

Todas estas clases provienen del paquete java.lang, por lo que no 
fue necesario importarlas.

Clase String:

-Un objeto de tipo String no se puede modificar.
 los objetos de la clase String son inmutables. Esto significa que, una vez 
creado, no se puede cambiar, por lo que cualquier cambio crea un nuevo objeto 
String.

-Es una clase definida en java.lang y por lo tanto no es necesario importar.
 porque la clase String es en realidad del paquete java.lang. El FQN es java.lang.String

- El package java.lang es el único paquete que no necesita ser importado
- Tiene clases fundamentales que cualquier aplicación necesita, como la clase 
  String y System
- Los objetos de la clase String son inmutables y usamos una sintaxis literal 
  para crear (objeto literal)
- Cualquier método para cambiar la clase String devuelve un nuevo String que 
  representa el cambio
- La clase String es una CharSequence
- Si necesitamos concatenar muchos String debemos usar la clase StringBuilder
- Vimos varios métodos de la clase String como trim, charAt, contains, isEmpty, 
  length, indexOf, replace

     System.out.println();//Es publico y statico
        //Si no necesito instanciarlo es estatico
        //Si necesito instanciarlo no es estatico

	
	La clase Object es la clase raíz de Java, es correcto afirmar:

- No es necesario que dejar explícito en la declaración de una clase que debe 
heredar de Object, porque esto es automático.
no hay necesidad de heredar de Object explícitamente, el compilador inserta 
automáticamente la declaración.

-Cualquier objeto puede ser referenciado por el tipo de Object, ya que es el principal.
el tipo de objeto es la forma más genérica de hacer referencia a un objeto.


¿Cuál es el propósito del método toString() de la clase Object?

-El método toString() existe para devolver información sobre el estado del objeto.
el método toString debería devolver información sobre el estado del objeto. 
Es útil para depurar en desarrollo.

-El método toString() existe para ser reemplazado.
es una buena práctica sobrescribir el método para darle un significado mayor que el resultado estándar de ese método.






























